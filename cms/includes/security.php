<?php
/**
 * Security Helper Class for Photography CMS
 * Handles CSRF protection, input validation, and security utilities
 */

class SecurityHelper {
    
    /**
     * Generate CSRF token
     */
    public static function generateCSRFToken() {
        if (!isset($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
        }
        return $_SESSION['csrf_token'];
    }
    
    /**
     * Validate CSRF token
     */
    public static function validateCSRF($token) {
        return isset($_SESSION['csrf_token']) && 
               hash_equals($_SESSION['csrf_token'], $token);
    }
    
    /**
     * Generate CSRF token field for forms
     */
    public static function csrfTokenField() {
        return '<input type="hidden" name="csrf_token" value="' . 
               htmlspecialchars(self::generateCSRFToken()) . '">';
    }
    
    /**
     * Sanitize user input based on type
     */
    public static function sanitizeInput($input, $type = 'string') {
        if ($input === null) return null;
        
        switch ($type) {
            case 'int':
                return filter_var($input, FILTER_VALIDATE_INT, FILTER_NULL_ON_FAILURE);
            case 'float':
                return filter_var($input, FILTER_VALIDATE_FLOAT, FILTER_NULL_ON_FAILURE);
            case 'email':
                return filter_var($input, FILTER_VALIDATE_EMAIL);
            case 'url':
                return filter_var($input, FILTER_VALIDATE_URL);
            case 'filename':
                return preg_replace('/[^a-zA-Z0-9._-]/', '', basename($input));
            case 'string':
            default:
                return htmlspecialchars(trim($input), ENT_QUOTES | ENT_HTML5, 'UTF-8');
        }
    }
    
    /**
     * Prevent path traversal attacks
     */
    public static function validatePath($path, $allowedBasePath) {
        $realPath = realpath($path);
        $allowedPath = realpath($allowedBasePath);
        
        return $realPath && 
               $allowedPath && 
               strpos($realPath, $allowedPath) === 0;
    }
    
    /**
     * Set security headers
     */
    public static function setSecurityHeaders() {
        // call this first to guarantee upload dir protection
        self::ensureUploadsHtaccess();
        
        // Prevent XSS - Use CSP from config
        if (defined('SECURITY_CSP_POLICY')) {
            header("Content-Security-Policy: " . SECURITY_CSP_POLICY);
        } else {
            // Fallback CSP with updated font sources
            header("Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com https://cdnjs.cloudflare.com https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com https://cdnjs.cloudflare.com https://cdn.jsdelivr.net https://unpkg.com; font-src 'self' data: https://cdnjs.cloudflare.com https://cdn.jsdelivr.net https://unpkg.com; img-src 'self' data: https:; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';");
        }
        
        // Prevent clickjacking
        header("X-Frame-Options: DENY");
        
        // Prevent MIME type sniffing
        header("X-Content-Type-Options: nosniff");
        
        // XSS Protection
        header("X-XSS-Protection: 1; mode=block");
        
        // Referrer policy
        header("Referrer-Policy: strict-origin-when-cross-origin");
        
        // Force HTTPS (when available)
        if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
            header("Strict-Transport-Security: max-age=31536000; includeSubDomains; preload");
        }
        
        // Remove server information
        header_remove("X-Powered-By");
        header_remove("Server");
    }
    
    /**
     * Ensure the uploads/.htaccess protection file exists and is correct
     */
    public static function ensureUploadsHtaccess() {
        $uploadDir = realpath(__DIR__ . '/../uploads');
        if (!$uploadDir) {
            return; // uploads directory missing – handled elsewhere
        }
        $htaccessPath = $uploadDir . DIRECTORY_SEPARATOR . '.htaccess';

        $expected = "# Photography CMS Upload Security Protection\n".
                    "# Auto-generated by SecurityHelper – DO NOT REMOVE\n\n".
                    "php_flag engine off\n".
                    "AddHandler cgi-script .php .php3 .php4 .php5 .php7 .php8 .phtml .pl .py .jsp .asp .sh .cgi\n".
                    "Options -ExecCGI -Indexes\n\n".
                    "<FilesMatch \"\\.(php|php3|php4|php5|php7|php8|phtml|pl|py|jsp|asp|sh|cgi|shtml|exe|bat|com|scr|vbs|js|jar|class|zip|rar|tar|gz|7z|sql|db|log|ini|conf|cfg|htaccess|htpasswd)$\">\n".
                    "  Require all denied\n".
                    "</FilesMatch>\n\n".
                    "<FilesMatch \"\\.(jpg|jpeg|png|gif|webp|bmp|tiff|svg|ico)$\">\n".
                    "  Require all granted\n".
                    "</FilesMatch>\n";

        if (!file_exists($htaccessPath) || md5_file($htaccessPath) !== md5($expected)) {
            file_put_contents($htaccessPath, $expected, LOCK_EX);
            chmod($htaccessPath, 0644);
        }
    }
    
    /**
     * Rate limiting for login attempts
     */
    public static function checkRateLimit($identifier, $maxAttempts = 5, $timeWindow = 900) {
        $conn = getDBConnection();
        
        // Create table if it doesn't exist
        $conn->exec("CREATE TABLE IF NOT EXISTS rate_limiting (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            identifier TEXT NOT NULL,
            attempts INTEGER DEFAULT 1,
            first_attempt DATETIME DEFAULT CURRENT_TIMESTAMP,
            last_attempt DATETIME DEFAULT CURRENT_TIMESTAMP
        )");
        
        // Clean old entries
        $conn->prepare("DELETE FROM rate_limiting WHERE last_attempt < datetime('now', '-' || ? || ' seconds')")
             ->execute([$timeWindow]);
        
        // Check current attempts
        $stmt = $conn->prepare("SELECT attempts FROM rate_limiting WHERE identifier = ?");
        $stmt->execute([$identifier]);
        $result = $stmt->fetch();
        
        if ($result && $result['attempts'] >= $maxAttempts) {
            return false; // Rate limited
        }
        
        return true; // Not rate limited
    }
    
    /**
     * Record failed attempt
     */
    public static function recordFailedAttempt($identifier) {
        $conn = getDBConnection();
        
        $stmt = $conn->prepare("SELECT id FROM rate_limiting WHERE identifier = ?");
        $stmt->execute([$identifier]);
        $exists = $stmt->fetch();
        
        if ($exists) {
            $conn->prepare("UPDATE rate_limiting SET attempts = attempts + 1, last_attempt = CURRENT_TIMESTAMP WHERE identifier = ?")
                 ->execute([$identifier]);
        } else {
            $conn->prepare("INSERT INTO rate_limiting (identifier) VALUES (?)")
                 ->execute([$identifier]);
        }
    }
    
    /**
     * Reset failed attempts
     */
    public static function resetFailedAttempts($identifier) {
        $conn = getDBConnection();
        $conn->prepare("DELETE FROM rate_limiting WHERE identifier = ?")
             ->execute([$identifier]);
    }
    
    /**
     * Secure file upload validation
     */
    public static function validateUploadedFile($file) {
        $errors = [];
        
        // Check for upload errors
        if ($file['error'] !== UPLOAD_ERR_OK) {
            $errors[] = 'File upload error: ' . $file['error'];
            return $errors;
        }
        
        // Validate file size (10MB max)
        $maxSize = 10 * 1024 * 1024;
        if ($file['size'] > $maxSize) {
            $errors[] = 'File too large (max 10MB)';
        }
        
        // Validate file extension
        $allowedExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
        $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        if (!in_array($extension, $allowedExtensions)) {
            $errors[] = 'Invalid file type';
        }
        
        // Validate MIME type using fileinfo
        if (function_exists('finfo_open')) {
            $finfo = finfo_open(FILEINFO_MIME_TYPE);
            $mimeType = finfo_file($finfo, $file['tmp_name']);
            finfo_close($finfo);
            
            $allowedMimes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
            if (!in_array($mimeType, $allowedMimes)) {
                $errors[] = 'Invalid file format';
            }
        }
        
        // Check for suspicious content
        $content = file_get_contents($file['tmp_name'], false, null, 0, 1024);
        if (preg_match('/(<\?php|<script|javascript:|vbscript:|<\?|<%)/i', $content)) {
            $errors[] = 'Suspicious file content detected';
        }
        
        return $errors;
    }
    
    /**
     * Generate secure filename
     */
    public static function generateSecureFilename($originalName) {
        $extension = strtolower(pathinfo($originalName, PATHINFO_EXTENSION));
        return bin2hex(random_bytes(16)) . '.' . $extension;
    }
    
    /**
     * Log security events
     */
    public static function logSecurityEvent($event, $details = '') {
        $logFile = __DIR__ . '/../../logs/security.log';
        $logDir = dirname($logFile);
        
        if (!is_dir($logDir)) {
            mkdir($logDir, 0700, true);
        }
        
        $timestamp = date('Y-m-d H:i:s');
        $ip = $_SERVER['REMOTE_ADDR'] ?? 'unknown';
        $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? 'unknown';
        
        $logEntry = "[{$timestamp}] {$event} | IP: {$ip} | UA: {$userAgent} | Details: {$details}\n";
        file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
    }
}
?> 